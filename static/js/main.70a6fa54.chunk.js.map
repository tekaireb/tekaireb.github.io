{"version":3,"sources":["components/sections/Intro.js","components/Project.js","components/sections/Projects.js","components/Timeline.js","components/sections/Jobs.js","components/App.js","reportWebVitals.js","index.js"],"names":["Intro","props","useState","typed_text","set_typed_text","typing","set_typing","text","text_index","char_index","type","length","substring","setTimeout","erase","type_delay","useEffect","className","onClick","document","querySelectorAll","scrollIntoView","Project","project","title","description","map","line","tags","tag","Projects","projects","monthDiff","d1","d2","getMonth","getFullYear","countOverlaps","range","other_ranges","count","forEach","r","a_start","a_end","b_start","b_end","start_date","end_date","Timeline","jobs","job","Date","first","last","start","diff","Array","fill","_","i","m","y","active_job","set_active_job","j","next_event","direction","value","getElementById","behavior","block","inline","href","link","company","toLocaleString","month","d","style","left","width","bottom","background","id","top","slice","Jobs","App","JobsData","ProjectsData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.70a6fa54.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../../styles/Intro.css'\n\nexport default function Intro(props) {\n    const [typed_text, set_typed_text] = useState('Tyler Ekaireb'); // Text typed within typewriter\n    const [typing, set_typing] = useState(false);                   // Typing flag\n\n    // Phrases to be typed\n    const text = ['Tyler Ekaireb', 'an engineer', 'a programmer', 'a tinkerer', 'a learner', 'a smoothie-maker'];\n\n    // Delays in milliseconds\n    const type_delay = 120;     // Delay between typing characters\n    const erase_delay = 100;    // Delay between erasing characters   \n    const new_delay = 5000;     // Delay between phrases\n    // Index variables\n    let text_index = 0;         // Index of phrase\n    let char_index = 12;        // Index of char within phrase\n\n    // Type each character within phrase, then call erase\n    function type() {\n        // Type as long as there are characters left in phrase\n        if (char_index <= text[text_index].length) {\n            if (!typing) set_typing(true);\n            set_typed_text(text[text_index].substring(0, char_index++));\n            setTimeout(type, type_delay);\n        }\n        // Call erase when finished\n        else {\n            set_typing(false);\n            setTimeout(erase, new_delay);\n        }\n    }\n\n    // Erase each character within phrase, then call type (with next phrase)\n    function erase() {\n        // Erase as long as there are characters left in typed_text\n        if (char_index > 0) {\n            if (!typing) set_typing(true);\n            set_typed_text(text[text_index].substring(0, --char_index));\n            setTimeout(erase, erase_delay);\n        }\n        // Go to next word and call type when finished\n        else {\n            set_typing(false);\n            text_index++;\n            if (text_index >= text.length) text_index = 0;\n            setTimeout(type, type_delay + 1000);\n        }\n    }\n\n    // Call erase when the page first loads\n    useEffect(() => {\n        if (text.length) setTimeout(erase, 4000);\n    }, []);\n\n    return (\n        <div className='intro'>\n            <p className='greeting'>Hello</p>\n            <div className=\"typewriter\">\n                <p>I'm <span className='typed_text'>{typed_text}</span><span className={'cursor ' + (typing ? 'typing' : '')}>&nbsp;</span></p>\n            </div>\n            <div className='down_button' onClick={() => document.querySelectorAll('.jobs')[0].scrollIntoView()}>↓</div>\n        </div>\n    );\n}","import React from 'react';\nimport '../styles/Project.css';\n\nexport default function Project(props) {\n\n    return (\n        <div className='project'>\n            <div>\n                <h3 className='project_header'>{props.project.title}</h3>\n                <p className='project_description'>{props.project.description.map(line => <span>{line}<br /></span>)}</p>\n            </div>\n            <div className='project_tags'>\n                {props.project.tags.map(tag => <span className='project_tag'>{tag}</span>)}\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport Project from '../Project';\nimport '../../styles/Projects.css';\n\nexport default function Projects(props) {\n    return (\n        <div className='projects'>\n            <h1>Projects</h1>\n            <h3 className='projects_subheader'>view more on GitHub</h3>\n            <div className='projects_grid'>\n                {props.projects.map(project => <Project project={project} />)}\n            </div>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport '../styles/Jobs.css';\n\n// Determine if two Dates have the same month and year\nfunction sameDate(d1, d2) {\n    return d1.getMonth === d2.getMonth && d1.getFullYear() === d2.getFullYear();\n}\n\n// Find number of months between two Dates\nfunction monthDiff(d1, d2) {\n    return d1.getMonth() - d2.getMonth() + (12 * (d1.getFullYear() - d2.getFullYear()))\n}\n\n// Determine whether or not two (date) ranges overlap\nfunction rangesOverlap(a_start, a_end, b_start, b_end) {\n    if (a_start <= b_start && b_start <= a_end) return true; // b starts in a\n    if (a_start <= b_end && b_end <= a_end) return true; // b ends in a\n    if (b_start < a_start && a_end < b_end) return true; // a in b\n    return false;\n}\n\n// Counts number of collisions between range and other_ranges\nfunction countOverlaps(range, other_ranges) {\n    let count = 0;\n\n    other_ranges.forEach(r => {\n        if (rangesOverlap(range.start_date, range.end_date, r.start_date, r.end_date))\n            count++;\n    });\n\n    return count;\n}\n\nexport default function Timeline(props) {\n    const TICK = 15; // Distance between months on timeline (in px)\n\n    // Convert date strings to Date objects\n    let jobs = props.jobs.map(job => ({\n        ...job,\n        start_date: new Date(job.start_date),\n        end_date: (job.end_date !== '' ? new Date(job.end_date) : new Date()) // Use present if no end_date specified\n    }));\n\n    // First and last job objects\n    let first = jobs[props.jobs.length - 1],\n        last = jobs[0];\n\n    // First and last dates in job timeline\n    let start = first.start_date,\n        end = last.end_date;\n\n    // Number of months between start/end dates\n    let diff = monthDiff(end, start);\n\n    // Generate array of objects containing every month/year between start and end, inclusive\n    var range = Array(diff + 1).fill().map((_, i) => ({\n        m: (i + start.getMonth()) % 12, // Month\n        y: start.getFullYear() + (i + start.getMonth()) / 12 // Year\n    }));\n\n    // Getter/Setter for current active job index\n    const [active_job, set_active_job] = useState(0);\n\n    // Current active job\n    let j = jobs[active_job];\n\n    const next_event = (direction, value = -1) => {\n        // Increment or decrement active_job\n        if (value === -1) {\n            if (direction && active_job !== 0) set_active_job(active_job - 1);\n            if (!direction && active_job !== jobs.length - 1) set_active_job(active_job + 1);\n        } else set_active_job(value);\n\n        // Bring active job bar on timeline into view\n        document.getElementById('job_bar_' + active_job).scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' })\n    }\n\n    \n\n    return (\n        <>\n            <div className='timeline_event'>\n                <p className='event_header'>\n                    {j.title} @ <a href={j.link}>{j.company}</a>\n                </p>\n                <p className='event_timeframe'>\n                    {j.start_date.toLocaleString('default', { month: 'long' })} {j.start_date.getFullYear()} -&nbsp;\n                    {sameDate(j.end_date, new Date()) ? 'Present' : j.end_date.toLocaleString('default', { month: 'long' }) + ' ' + j.end_date.getFullYear()}\n                </p>\n                <div className='event_description'>\n                    {j.description.map(line => <span>{line}<br /></span>)}\n                </div>\n\n                {active_job !== jobs.length - 1 && <div className='event_left' onClick={() => next_event(0)}>←</div>}\n                {active_job !== 0 && <div className='event_right' onClick={() => next_event(1)}>→</div>}\n            </div>\n            <div className='axis'>\n                {/* Axis */}\n                {range.map((d, i) =>\n                    <>\n                        {/* Gridlines */}\n                        <div className='line' style={{\n                            left: i * TICK,\n                            width: d.m ? 1 : 2, // Make width 2px on new year\n                            bottom: d.m ? 40 : 30, // Make line lower on new year\n                            background: d.m ? 'rgb(180, 245, 240, 0.1)' : 'rgb(180, 245, 240, 0.3)' // Make color darker on new year\n                        }}></div>\n\n                        {/* Date Labels */}\n                        {d.m === 0 && <div className='year' style={{ left: i * TICK - 15 }}>{d.y}</div>}\n                    </>\n                )}\n\n                {/* Jobs */}\n                {jobs.map((job, i) =>\n                    <div\n                        className='job_bar' id={'job_bar_' + i}\n                        style={{\n                            left: monthDiff(job.start_date, start) * TICK,\n                            width: monthDiff(job.end_date, job.start_date) * TICK,\n                            top: countOverlaps(job, jobs.slice(0, i)) * (15) + 5,\n                            background: i === active_job ? '#00d9f0' : '#b4f5f0'\n                        }}\n                        onClick={() => next_event(0, i)}\n                    ></div>\n                )}\n            </div>\n        </>\n    );\n\n}","import React from 'react';\nimport '../../styles/Jobs.css';\n\nimport Timeline from '../Timeline';\n\nexport default function Jobs(props) {\n    return (\n        <div className='jobs'>\n            <h1>Work History</h1>\n            <div className='jobs_container'>\n                <div className='jobs_timeline'>\n                    <div className='events'></div>\n                    <Timeline jobs={props.jobs} />\n                </div>\n            </div>\n        </div>\n    );\n}","import '../styles/App.css';\nimport JobsData from \"../content/jobs.json\";\nimport ProjectsData from \"../content/projects.json\";\n\nimport Intro from './sections/Intro';\nimport Projects from './sections/Projects';\nimport Jobs from './sections/Jobs';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Intro />\n      <Jobs jobs={JobsData} />\n      <Projects projects={ProjectsData} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}