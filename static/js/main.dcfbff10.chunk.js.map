{"version":3,"sources":["components/sections/Intro.js","components/Project.js","components/sections/Projects.js","components/Timeline.js","components/sections/Jobs.js","components/App.js","reportWebVitals.js","index.js"],"names":["Intro","props","useState","typed_text","set_typed_text","typing","set_typing","text","text_index","char_index","type","length","substring","setTimeout","erase","type_delay","useEffect","className","class","onClick","document","querySelectorAll","scrollIntoView","Project","project","title","description","map","line","tags","tag","Projects","projects","Timeline","d1","d2","first","jobs","last","start","Date","start_date","end","end_date","diff","getMonth","getFullYear","range","Array","Math","abs","fill","_","i","m","y","console","log","d","style","left","width","bottom","background","Jobs","App","JobsData","ProjectsData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+8GAGe,SAASA,EAAMC,GAAQ,IAAD,EACIC,mBAAS,iBADb,mBAC1BC,EAD0B,KACdC,EADc,OAEJF,oBAAS,GAFL,mBAE1BG,EAF0B,KAElBC,EAFkB,KAK3BC,EAAO,CAAC,gBAAiB,cAAe,eAAgB,aAAc,YAAa,oBAOrFC,EAAa,EACbC,EAAa,GAGjB,SAASC,IAEDD,GAAcF,EAAKC,GAAYG,QAC1BN,GAAQC,GAAW,GACxBF,EAAeG,EAAKC,GAAYI,UAAU,EAAGH,MAC7CI,WAAWH,EAbA,OAiBXJ,GAAW,GACXO,WAAWC,EAhBD,MAqBlB,SAASA,IAEDL,EAAa,GACRJ,GAAQC,GAAW,GACxBF,EAAeG,EAAKC,GAAYI,UAAU,IAAKH,IAC/CI,WAAWC,EA3BC,OA+BZR,GAAW,KACXE,GACkBD,EAAKI,SAAQH,EAAa,GAC5CK,WAAWH,EAAMK,OASzB,OAJAC,qBAAU,WACFT,EAAKI,QAAQE,WAAWC,EAAO,OACpC,IAGC,sBAAKG,UAAU,QAAf,UACI,mBAAGA,UAAU,WAAb,mBACA,qBAAKC,MAAM,aAAX,SACI,qCAAO,sBAAMA,MAAM,aAAZ,SAA0Bf,IAAkB,sBAAMe,MAAO,WAAab,EAAS,SAAW,IAA9C,uBAEvD,qBAAKY,UAAU,cAAcE,QAAS,kBAAMC,SAASC,iBAAiB,aAAa,GAAGC,kBAAtF,uB,MC1DG,SAASC,EAAQtB,GAE5B,OACI,sBAAKgB,UAAU,UAAf,UACI,gCACI,oBAAIA,UAAU,iBAAd,SAAgChB,EAAMuB,QAAQC,QAC9C,mBAAGR,UAAU,sBAAb,SAAoChB,EAAMuB,QAAQE,YAAYC,KAAI,SAAAC,GAAI,OAAI,iCAAOA,EAAK,kCAE1F,qBAAKX,UAAU,eAAf,SACKhB,EAAMuB,QAAQK,KAAKF,KAAI,SAAAG,GAAG,OAAI,sBAAMb,UAAU,cAAhB,SAA+Ba,Y,MCR/D,SAASC,EAAS9B,GAC7B,OACI,sBAAKiB,MAAM,WAAX,UACI,0CACA,oBAAIA,MAAM,qBAAV,iCACA,qBAAKD,UAAU,gBAAf,SACKhB,EAAM+B,SAASL,KAAI,SAAAH,GAAO,OAAI,cAAC,EAAD,CAASA,QAASA,Y,KCFlD,SAASS,EAAShC,GAE7B,IANeiC,EAAIC,EAMfC,EAAQnC,EAAMoC,KAAKpC,EAAMoC,KAAK1B,OAAS,GACvC2B,EAAOrC,EAAMoC,KAAK,GAGlBE,EAAQ,IAAIC,KAAKJ,EAAMK,YACvBC,EAAyB,KAAlBJ,EAAKK,SAAkB,IAAIH,KAAKF,EAAKK,UAAY,IAAIH,KAG5DI,GAdeT,EAcSO,GAdbR,EAcMK,GAbXM,WAAaV,EAAGU,WAAc,IAAMX,EAAGY,cAAgBX,EAAGW,gBAgBhEC,EAAQC,MAAMC,KAAKC,IAAIN,GAAQ,GAAGO,OAAOxB,KAAI,SAACyB,EAAGC,GAAJ,MAAW,CACxDC,GAAID,EAAId,EAAMM,YAAc,GAC5BU,EAAGhB,EAAMO,eAAiBO,EAAId,EAAMM,YAAc,OAItD,OAFAW,QAAQC,IAAIV,GAGR,qCACI,qBAAK9B,UAAU,mBACf,qBAAKA,UAAU,OAAf,SAEK8B,EAAMpB,KAAI,SAAC+B,EAAGL,GAAJ,OACP,qCAEI,qBAAKpC,UAAU,OAAO0C,MAAO,CACzBC,KAAU,GAAJP,EACNQ,MAAOH,EAAEJ,EAAI,EAAI,EACjBQ,OAAQJ,EAAEJ,EAAI,GAAK,GACnBS,WAAYL,EAAEJ,EAAI,0BAA4B,6BAIzC,IAARI,EAAEJ,GAAW,qBAAKrC,UAAU,OAAO0C,MAAO,CAAEC,KAAU,GAAJP,EAAS,IAA9C,SAAqDK,EAAEH,eCtC9E,SAASS,EAAK/D,GACzB,OACI,sBAAKiB,MAAM,OAAX,UACI,sCACA,qBAAKD,UAAU,iBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKA,UAAU,WACf,cAACgB,EAAD,CAAUI,KAAMpC,EAAMoC,eCM3B4B,MAVf,WACE,OACE,sBAAKhD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAMoB,KAAM6B,IACZ,cAAC,EAAD,CAAUlC,SAAUmC,QCDXC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3D,SAAS4D,eAAe,SAM1BZ,M","file":"static/js/main.dcfbff10.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../../styles/Intro.css'\n\nexport default function Intro(props) {\n    const [typed_text, set_typed_text] = useState('Tyler Ekaireb'); // Text typed within typewriter\n    const [typing, set_typing] = useState(false);                   // Typing flag\n\n    // Phrases to be typed\n    const text = ['Tyler Ekaireb', 'an engineer', 'a programmer', 'a tinkerer', 'a learner', 'a smoothie-maker'];\n\n    // Delays in milliseconds\n    const type_delay = 200;     // Delay between typing characters\n    const erase_delay = 100;    // Delay between erasing characters   \n    const new_delay = 5000;     // Delay between phrases\n    // Index variables\n    let text_index = 0;         // Index of phrase\n    let char_index = 12;        // Index of char within phrase\n\n    // Type each character within phrase, then call erase\n    function type() {\n        // Type as long as there are characters left in phrase\n        if (char_index <= text[text_index].length) {\n            if (!typing) set_typing(true);\n            set_typed_text(text[text_index].substring(0, char_index++));\n            setTimeout(type, type_delay);\n        }\n        // Call erase when finished\n        else {\n            set_typing(false);\n            setTimeout(erase, new_delay);\n        }\n    }\n\n    // Erase each character within phrase, then call type (with next phrase)\n    function erase() {\n        // Erase as long as there are characters left in typed_text\n        if (char_index > 0) {\n            if (!typing) set_typing(true);\n            set_typed_text(text[text_index].substring(0, --char_index));\n            setTimeout(erase, erase_delay);\n        }\n        // Go to next word and call type when finished\n        else {\n            set_typing(false);\n            text_index++;\n            if (text_index >= text.length) text_index = 0;\n            setTimeout(type, type_delay + 1000);\n        }\n    }\n\n    // Call erase when the page first loads\n    useEffect(() => {\n        if (text.length) setTimeout(erase, 4000);\n    }, []);\n\n    return (\n        <div className='intro'>\n            <p className='greeting'>Hello</p>\n            <div class=\"typewriter\">\n                <p>I'm <span class='typed_text'>{typed_text}</span><span class={'cursor ' + (typing ? 'typing' : '')}>&nbsp;</span></p>\n            </div>\n            <div className='down_button' onClick={() => document.querySelectorAll('.projects')[0].scrollIntoView()}>â†“</div>\n        </div>\n    );\n}","import React, {useState, useEffect} from 'react';\nimport '../styles/Project.css';\n\nexport default function Project(props) {\n\n    return (\n        <div className='project'>\n            <div>\n                <h3 className='project_header'>{props.project.title}</h3>\n                <p className='project_description'>{props.project.description.map(line => <span>{line}<br /></span>)}</p>\n            </div>\n            <div className='project_tags'>\n                {props.project.tags.map(tag => <span className='project_tag'>{tag}</span>)}\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport Project from '../Project';\nimport '../../styles/Projects.css';\n\nexport default function Projects(props) {\n    return (\n        <div class='projects'>\n            <h1>Projects</h1>\n            <h3 class='projects_subheader'>view more on GitHub</h3>\n            <div className='projects_grid'>\n                {props.projects.map(project => <Project project={project} />)}\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport '../styles/Jobs.css';\n\n// Find number of months between two Dates\nfunction monthDiff(d1, d2) {\n    return d1.getMonth() - d2.getMonth() + (12 * (d1.getFullYear() - d2.getFullYear()))\n}\n\nexport default function Timeline(props) {\n    // First and last job objects\n    let first = props.jobs[props.jobs.length - 1],\n        last = props.jobs[0];\n\n    // First and last dates in job timeline\n    let start = new Date(first.start_date),\n        end = (last.end_date !== '' ? new Date(last.end_date) : new Date()); // Use present if no end_date specified\n\n    // Number of months between start/end dates\n    let diff = monthDiff(start, end);\n\n\n    var range = Array(Math.abs(diff) + 1).fill().map((_, i) => ({\n        m: (i + start.getMonth()) % 12, // Month\n        y: start.getFullYear() + (i + start.getMonth()) / 12 // Year\n    }));\n    console.log(range);\n\n    return (\n        <>\n            <div className='timeline_event'></div>\n            <div className='axis'>\n                {/* Axis */}\n                {range.map((d, i) =>\n                    <>\n                        {/* Gridlines */}\n                        <div className='line' style={{\n                            left: i * 10,\n                            width: d.m ? 1 : 2, // Make width 2px on new year\n                            bottom: d.m ? 30 : 25, // Make line lower on new year\n                            background: d.m ? 'rgb(180, 245, 240, 0.1)' : 'rgb(180, 245, 240, 0.3)' // Make color darker on new year\n                        }}></div>\n\n                        {/* Date Labels */}\n                        {d.m === 0 && <div className='year' style={{ left: i * 10 - 15 }}>{d.y}</div>}\n                    </>\n                )}\n\n\n            </div>\n        </>\n    );\n\n}","import React from 'react';\nimport '../../styles/Jobs.css';\n\nimport Timeline from '../Timeline';\n\nexport default function Jobs(props) {\n    return (\n        <div class='jobs'>\n            <h1>Jobs</h1>\n            <div className='jobs_container'>\n                <div className='jobs_timeline'>\n                    <div className='events'></div>\n                    <Timeline jobs={props.jobs} />\n                </div>\n            </div>\n        </div>\n    );\n}","import '../styles/App.css';\nimport JobsData from \"../content/jobs.json\";\nimport ProjectsData from \"../content/projects.json\";\n\nimport Intro from './sections/Intro';\nimport Projects from './sections/Projects';\nimport Jobs from './sections/Jobs';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Intro />\n      <Jobs jobs={JobsData} />\n      <Projects projects={ProjectsData} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}